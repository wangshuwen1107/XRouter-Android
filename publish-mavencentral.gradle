apply plugin: 'maven-publish'
apply plugin: 'signing'

def isAar = project.plugins.hasPlugin('com.android.library')
if (isAar) {
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }
} else {
    task javadocJar(type: Jar) {
        archiveClassifier.set("javadoc")
        classifier = "javadoc"
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value -> ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

def configurePublication = { MavenPublication publication ->
    groupId PUBLISH_GROUP_ID
    artifactId PUBLISH_ARTIFACT_ID
    version PUBLISH_VERSION

    def uploadJar = "mavenJava" == publication.name
    if (uploadJar) {
        from components.java
        artifact sourcesJar
        artifact javadocJar
    } else {
        artifact tasks.getByName("bundleReleaseAar")
        artifact androidSourcesJar
    }

    pom {
        name = PUBLISH_ARTIFACT_ID
        description = 'XRouter-Android'
        url = 'https://github.com/wangshuwen1107/XRouter-Android.git'
        licenses {
            license {
                //协议类型，一般默认Apache License2.0的话不用改：
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
        developers {
            developer {
                id = 'wangshuwen1107'
                name = 'wangshuwen1107'
                email = 'wnwn7375@outlook.com'
            }
        }
        scm {
            connection = 'scm:git:github.com/wangshuwen1107/XRouter-Android.git'
            developerConnection = 'scm:git:ssh://github.com/wangshuwen1107/XRouter-Android.git'
            url = 'https://github.com/wangshuwen1107/XRouter-Android.git/master'
        }
        withXml {
            if (!uploadJar) {
                def dependenciesNode = asNode().appendNode('dependencies')
                project.configurations.implementation.allDependencies.each {
                    if (null != it.group && null != it.name && null != it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            if (isAar) {
                release(MavenPublication, configurePublication)
            } else {
                mavenJava(MavenPublication, configurePublication)
            }
        }
        repositories {
            maven {
                url = uri('../repo')
            }
        }
    }
}


signing {
    sign publishing.publications
}

task zipRepo(type: Zip) {
    group = "publishing"
    dependsOn isAar ? 'publishReleasePublicationToMavenRepository' : 'publishMavenJavaPublicationToMavenRepository'
    def componentDirPath = "${PUBLISH_GROUP_ID.replace(".", "/")}/$PUBLISH_ARTIFACT_ID/$PUBLISH_VERSION"
    archiveBaseName = PUBLISH_ARTIFACT_ID
    archiveVersion = PUBLISH_VERSION
    destinationDirectory = file("../publish")
    from("${rootProject.projectDir}/repo/$componentDirPath") {
        into("$componentDirPath")
    }
}

task publishSonatype {
    group = "publishing"
    dependsOn 'zipRepo'
    doLast {
        def publishZipFile = file("../publish/$PUBLISH_ARTIFACT_ID-$PUBLISH_VERSION" + ".zip")
        def uploadToken = Base64.getEncoder().encodeToString("$ossrhUsername:$ossrhPassword".getBytes("UTF-8"))
        println "发布 uploadToken=$uploadToken"
        println "发布 bundle=${publishZipFile.absolutePath}"
        def curlOutput = new ByteArrayOutputStream()
        def curlError = new ByteArrayOutputStream()
        try {
            exec {
                commandLine 'curl', '--request', 'POST',
                        '--header', "Authorization: Bearer $uploadToken",
                        '--form', "bundle=@${publishZipFile.absolutePath}",
                        '--form', "publishingType=AUTOMATIC",
                        //'--form', "publishingType=USER_MANAGED",
                        'https://central.sonatype.com/api/v1/publisher/upload'
                standardOutput = curlOutput
                errorOutput = curlError
            }
            println "发布结果*********: ${curlOutput.toString()}"
        } catch (Exception e) {
            println "发布失败*********: ${curlError.toString()}"
            throw e
        }
    }
}